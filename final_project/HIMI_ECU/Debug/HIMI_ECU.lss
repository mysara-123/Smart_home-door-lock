
HIMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002c40  00002cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080016c  0080016c  00002de0  2**0
                  ALLOC
  3 .stab         00002a18  00000000  00000000  00002de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001291  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000986d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 10 	call	0x2142	; 0x2142 <main>
      8a:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e5       	ldi	r26, 0x56	; 86
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e5       	ldi	r24, 0x56	; 86
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:


static volatile void (*g_CallBackPtr)(void) = NULL_PTR;	//global pointer to function to be used for the cb


ISR(TIMER1_OVF_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
     b70:	e0 91 6c 01 	lds	r30, 0x016C
     b74:	f0 91 6d 01 	lds	r31, 0x016D
     b78:	09 95       	icall
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_7>:

ISR(TIMER1_COMPA_vect){
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
     bca:	e0 91 6c 01 	lds	r30, 0x016C
     bce:	f0 91 6d 01 	lds	r31, 0x016D
     bd2:	09 95       	icall
}
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <Timer_1_init>:

/*
 * Description : Initialize timer1 based on a given config structure
 *
 */
void Timer_1_init(const Timer1_ConfigType * Config_Ptr){
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <Timer_1_init+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01

	//in normal mode WGM10 WGM11 WGM12 WGM13 are all 0 so we can set them all to 0 by default
	CLEAR_BIT(TCCR1A,WGM10);
     c08:	af e4       	ldi	r26, 0x4F	; 79
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ef e4       	ldi	r30, 0x4F	; 79
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
     c16:	af e4       	ldi	r26, 0x4F	; 79
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ef e4       	ldi	r30, 0x4F	; 79
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8d 7f       	andi	r24, 0xFD	; 253
     c22:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
     c24:	ae e4       	ldi	r26, 0x4E	; 78
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ee e4       	ldi	r30, 0x4E	; 78
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	87 7f       	andi	r24, 0xF7	; 247
     c30:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
     c32:	ae e4       	ldi	r26, 0x4E	; 78
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ee e4       	ldi	r30, 0x4E	; 78
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8f 7e       	andi	r24, 0xEF	; 239
     c3e:	8c 93       	st	X, r24


	if(Config_Ptr->mode == CTC_OCR){		//CTC mode was selected
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	85 81       	ldd	r24, Z+5	; 0x05
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	c1 f4       	brne	.+48     	; 0xc7a <Timer_1_init+0x80>

		//in CTC mode only WGM12 is 1
		SET_BIT(TCCR1B,WGM12);
     c4a:	ae e4       	ldi	r26, 0x4E	; 78
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	ee e4       	ldi	r30, 0x4E	; 78
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	8c 93       	st	X, r24

		//assign the compare value to OCR1A
		OCR1A = Config_Ptr->compare_value;
     c58:	aa e4       	ldi	r26, 0x4A	; 74
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	93 81       	ldd	r25, Z+3	; 0x03
     c64:	11 96       	adiw	r26, 0x01	; 1
     c66:	9c 93       	st	X, r25
     c68:	8e 93       	st	-X, r24

		//enable interrupt for OCIE1A
		SET_BIT(TIMSK,OCIE1A);
     c6a:	a9 e5       	ldi	r26, 0x59	; 89
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e9 e5       	ldi	r30, 0x59	; 89
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 61       	ori	r24, 0x10	; 16
     c76:	8c 93       	st	X, r24
     c78:	0c c0       	rjmp	.+24     	; 0xc92 <Timer_1_init+0x98>

	}else if(Config_Ptr->mode == NORMAL){	//Normal mode was selected
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	85 81       	ldd	r24, Z+5	; 0x05
     c80:	88 23       	and	r24, r24
     c82:	39 f4       	brne	.+14     	; 0xc92 <Timer_1_init+0x98>

		//enable interrupt for TOIE1
		SET_BIT(TIMSK,TOIE1);
     c84:	a9 e5       	ldi	r26, 0x59	; 89
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e9 e5       	ldi	r30, 0x59	; 89
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	84 60       	ori	r24, 0x04	; 4
     c90:	8c 93       	st	X, r24

	}

	//only active when using non-PWM mode
	SET_BIT(TCCR1A,FOC1A);
     c92:	af e4       	ldi	r26, 0x4F	; 79
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ef e4       	ldi	r30, 0x4F	; 79
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
     ca0:	af e4       	ldi	r26, 0x4F	; 79
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ef e4       	ldi	r30, 0x4F	; 79
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	8c 93       	st	X, r24

	//assign initial value
	TCNT1 = Config_Ptr->initial_value;
     cae:	ac e4       	ldi	r26, 0x4C	; 76
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	9c 93       	st	X, r25
     cbe:	8e 93       	st	-X, r24


//	TCCR1B 0 to 2 clock select
//	clock bits are 0 1 2    0000 0111 = f7
//							1111 1000 = ~f7
	TCCR1B = (TCCR1B & ~0xf7) | ( ( (Config_Ptr->prescaler) <<0) & 0xf7 );
     cc0:	ae e4       	ldi	r26, 0x4E	; 78
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ee e4       	ldi	r30, 0x4E	; 78
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	98 2f       	mov	r25, r24
     ccc:	98 70       	andi	r25, 0x08	; 8
     cce:	e9 81       	ldd	r30, Y+1	; 0x01
     cd0:	fa 81       	ldd	r31, Y+2	; 0x02
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	89 2b       	or	r24, r25
     cd8:	8c 93       	st	X, r24


}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <Timer_1_deInit>:

/*
 * Description : Deinitialize timer1
 *
 */
void Timer_1_deInit(void){
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr = NULL_PTR;
     cec:	10 92 6d 01 	sts	0x016D, r1
     cf0:	10 92 6c 01 	sts	0x016C, r1
	TCCR1A = 0;
     cf4:	ef e4       	ldi	r30, 0x4F	; 79
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	10 82       	st	Z, r1
	TCCR1B = 0;
     cfa:	ee e4       	ldi	r30, 0x4E	; 78
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	10 82       	st	Z, r1
	TCNT1 = 0;
     d00:	ec e4       	ldi	r30, 0x4C	; 76
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	11 82       	std	Z+1, r1	; 0x01
     d06:	10 82       	st	Z, r1
	OCR1A = 0;
     d08:	ea e4       	ldi	r30, 0x4A	; 74
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	11 82       	std	Z+1, r1	; 0x01
     d0e:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
     d10:	a9 e5       	ldi	r26, 0x59	; 89
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e9 e5       	ldi	r30, 0x59	; 89
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8c 73       	andi	r24, 0x3C	; 60
     d1c:	8c 93       	st	X, r24
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <Timer_1_setCallBack>:

/*
 * Description : Set the callback function for timer1
 *
 */
void Timer_1_setCallBack(void(*a_ptr)(void)){
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <Timer_1_setCallBack+0x6>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=a_ptr;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	90 93 6d 01 	sts	0x016D, r25
     d3a:	80 93 6c 01 	sts	0x016C, r24
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <GPIO_setupPinDirection+0x6>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <GPIO_setupPinDirection+0x8>
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	6a 83       	std	Y+2, r22	; 0x02
     d5a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	88 30       	cpi	r24, 0x08	; 8
     d60:	08 f0       	brcs	.+2      	; 0xd64 <GPIO_setupPinDirection+0x1c>
     d62:	d5 c0       	rjmp	.+426    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	84 30       	cpi	r24, 0x04	; 4
     d68:	08 f0       	brcs	.+2      	; 0xd6c <GPIO_setupPinDirection+0x24>
     d6a:	d1 c0       	rjmp	.+418    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3d 83       	std	Y+5, r19	; 0x05
     d74:	2c 83       	std	Y+4, r18	; 0x04
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_setupPinDirection+0x3a>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <GPIO_setupPinDirection+0xc0>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <GPIO_setupPinDirection+0x4e>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	71 f0       	breq	.+28     	; 0xdb0 <GPIO_setupPinDirection+0x68>
     d94:	bc c0       	rjmp	.+376    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
     d96:	2c 81       	ldd	r18, Y+4	; 0x04
     d98:	3d 81       	ldd	r19, Y+5	; 0x05
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <GPIO_setupPinDirection+0x5a>
     da0:	5f c0       	rjmp	.+190    	; 0xe60 <GPIO_setupPinDirection+0x118>
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	91 05       	cpc	r25, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <GPIO_setupPinDirection+0x66>
     dac:	85 c0       	rjmp	.+266    	; 0xeb8 <GPIO_setupPinDirection+0x170>
     dae:	af c0       	rjmp	.+350    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	a1 f4       	brne	.+40     	; 0xdde <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     db6:	aa e3       	ldi	r26, 0x3A	; 58
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ea e3       	ldi	r30, 0x3A	; 58
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <GPIO_setupPinDirection+0x8c>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <GPIO_setupPinDirection+0x88>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	98 c0       	rjmp	.+304    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     dde:	aa e3       	ldi	r26, 0x3A	; 58
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ea e3       	ldi	r30, 0x3A	; 58
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_setupPinDirection+0xb4>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_setupPinDirection+0xb0>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	83 c0       	rjmp	.+262    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	a1 f4       	brne	.+40     	; 0xe36 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e0e:	a7 e3       	ldi	r26, 0x37	; 55
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e7 e3       	ldi	r30, 0x37	; 55
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <GPIO_setupPinDirection+0xe4>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <GPIO_setupPinDirection+0xe0>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	6c c0       	rjmp	.+216    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <GPIO_setupPinDirection+0x10c>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <GPIO_setupPinDirection+0x108>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	57 c0       	rjmp	.+174    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	a1 f4       	brne	.+40     	; 0xe8e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e66:	a4 e3       	ldi	r26, 0x34	; 52
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e4 e3       	ldi	r30, 0x34	; 52
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <GPIO_setupPinDirection+0x13c>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <GPIO_setupPinDirection+0x138>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_setupPinDirection+0x164>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_setupPinDirection+0x160>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	2b c0       	rjmp	.+86     	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	a1 f4       	brne	.+40     	; 0xee6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ebe:	a1 e3       	ldi	r26, 0x31	; 49
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e1 e3       	ldi	r30, 0x31	; 49
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <GPIO_setupPinDirection+0x194>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <GPIO_setupPinDirection+0x190>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ee6:	a1 e3       	ldi	r26, 0x31	; 49
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <GPIO_setupPinDirection+0x1bc>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <GPIO_setupPinDirection+0x1b8>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <GPIO_writePin+0x6>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <GPIO_writePin+0x8>
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	6a 83       	std	Y+2, r22	; 0x02
     f30:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num>=NUM_OF_PINS_PER_PORT)||(port_num>=NUM_OF_PORTS))
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	88 30       	cpi	r24, 0x08	; 8
     f36:	08 f0       	brcs	.+2      	; 0xf3a <GPIO_writePin+0x1c>
     f38:	d5 c0       	rjmp	.+426    	; 0x10e4 <GPIO_writePin+0x1c6>
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <GPIO_writePin+0x24>
     f40:	d1 c0       	rjmp	.+418    	; 0x10e4 <GPIO_writePin+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3d 83       	std	Y+5, r19	; 0x05
     f4a:	2c 83       	std	Y+4, r18	; 0x04
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 05       	cpc	r25, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <GPIO_writePin+0x3a>
     f56:	43 c0       	rjmp	.+134    	; 0xfde <GPIO_writePin+0xc0>
     f58:	2c 81       	ldd	r18, Y+4	; 0x04
     f5a:	3d 81       	ldd	r19, Y+5	; 0x05
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	2c f4       	brge	.+10     	; 0xf6c <GPIO_writePin+0x4e>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	71 f0       	breq	.+28     	; 0xf86 <GPIO_writePin+0x68>
     f6a:	bc c0       	rjmp	.+376    	; 0x10e4 <GPIO_writePin+0x1c6>
     f6c:	2c 81       	ldd	r18, Y+4	; 0x04
     f6e:	3d 81       	ldd	r19, Y+5	; 0x05
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <GPIO_writePin+0x5a>
     f76:	5f c0       	rjmp	.+190    	; 0x1036 <GPIO_writePin+0x118>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <GPIO_writePin+0x66>
     f82:	85 c0       	rjmp	.+266    	; 0x108e <GPIO_writePin+0x170>
     f84:	af c0       	rjmp	.+350    	; 0x10e4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	a1 f4       	brne	.+40     	; 0xfb4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f8c:	ab e3       	ldi	r26, 0x3B	; 59
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	eb e3       	ldi	r30, 0x3B	; 59
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <GPIO_writePin+0x8c>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <GPIO_writePin+0x88>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	98 c0       	rjmp	.+304    	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_writePin+0xb4>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_writePin+0xb0>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	83 c0       	rjmp	.+262    	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	a1 f4       	brne	.+40     	; 0x100c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fe4:	a8 e3       	ldi	r26, 0x38	; 56
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 e3       	ldi	r30, 0x38	; 56
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <GPIO_writePin+0xe4>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <GPIO_writePin+0xe0>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	6c c0       	rjmp	.+216    	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    100c:	a8 e3       	ldi	r26, 0x38	; 56
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_writePin+0x10c>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_writePin+0x108>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	57 c0       	rjmp	.+174    	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	a1 f4       	brne	.+40     	; 0x1064 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    103c:	a5 e3       	ldi	r26, 0x35	; 53
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e3       	ldi	r30, 0x35	; 53
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <GPIO_writePin+0x13c>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <GPIO_writePin+0x138>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_writePin+0x164>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_writePin+0x160>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	2b c0       	rjmp	.+86     	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	a1 f4       	brne	.+40     	; 0x10bc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1094:	a2 e3       	ldi	r26, 0x32	; 50
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e2 e3       	ldi	r30, 0x32	; 50
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <GPIO_writePin+0x194>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <GPIO_writePin+0x190>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_writePin+0x1bc>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_writePin+0x1b8>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_readPin+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <GPIO_readPin+0x8>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	8a 83       	std	Y+2, r24	; 0x02
    1104:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value= LOGIC_LOW;
    1106:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num>=NUM_OF_PINS_PER_PORT)||(port_num>=NUM_OF_PORTS))
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 30       	cpi	r24, 0x08	; 8
    110c:	08 f0       	brcs	.+2      	; 0x1110 <GPIO_readPin+0x1c>
    110e:	84 c0       	rjmp	.+264    	; 0x1218 <GPIO_readPin+0x124>
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	08 f0       	brcs	.+2      	; 0x1118 <GPIO_readPin+0x24>
    1116:	80 c0       	rjmp	.+256    	; 0x1218 <GPIO_readPin+0x124>
	{
		/*Do Nothing */
	}
	else
	{
		switch(port_num)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3d 83       	std	Y+5, r19	; 0x05
    1120:	2c 83       	std	Y+4, r18	; 0x04
    1122:	4c 81       	ldd	r20, Y+4	; 0x04
    1124:	5d 81       	ldd	r21, Y+5	; 0x05
    1126:	41 30       	cpi	r20, 0x01	; 1
    1128:	51 05       	cpc	r21, r1
    112a:	79 f1       	breq	.+94     	; 0x118a <GPIO_readPin+0x96>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	91 05       	cpc	r25, r1
    1134:	34 f4       	brge	.+12     	; 0x1142 <GPIO_readPin+0x4e>
    1136:	2c 81       	ldd	r18, Y+4	; 0x04
    1138:	3d 81       	ldd	r19, Y+5	; 0x05
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	69 f0       	breq	.+26     	; 0x115a <GPIO_readPin+0x66>
    1140:	6b c0       	rjmp	.+214    	; 0x1218 <GPIO_readPin+0x124>
    1142:	4c 81       	ldd	r20, Y+4	; 0x04
    1144:	5d 81       	ldd	r21, Y+5	; 0x05
    1146:	42 30       	cpi	r20, 0x02	; 2
    1148:	51 05       	cpc	r21, r1
    114a:	b9 f1       	breq	.+110    	; 0x11ba <GPIO_readPin+0xc6>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <GPIO_readPin+0x64>
    1156:	49 c0       	rjmp	.+146    	; 0x11ea <GPIO_readPin+0xf6>
    1158:	5f c0       	rjmp	.+190    	; 0x1218 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    115a:	e9 e3       	ldi	r30, 0x39	; 57
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_readPin+0x7e>
    116e:	55 95       	asr	r21
    1170:	47 95       	ror	r20
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_readPin+0x7a>
    1176:	ca 01       	movw	r24, r20
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	90 70       	andi	r25, 0x00	; 0
    117c:	88 23       	and	r24, r24
    117e:	19 f0       	breq	.+6      	; 0x1186 <GPIO_readPin+0x92>
			{
				pin_value=LOGIC_HIGH;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	49 c0       	rjmp	.+146    	; 0x1218 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value=LOGIC_LOW;
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	47 c0       	rjmp	.+142    	; 0x1218 <GPIO_readPin+0x124>
			}
		break;

		case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num))
    118a:	e6 e3       	ldi	r30, 0x36	; 54
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_readPin+0xae>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_readPin+0xaa>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	88 23       	and	r24, r24
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <GPIO_readPin+0xc2>
				{
					pin_value=LOGIC_HIGH;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	31 c0       	rjmp	.+98     	; 0x1218 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value=LOGIC_LOW;
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	2f c0       	rjmp	.+94     	; 0x1218 <GPIO_readPin+0x124>
				}
			break;
		case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num))
    11ba:	e3 e3       	ldi	r30, 0x33	; 51
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <GPIO_readPin+0xde>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <GPIO_readPin+0xda>
    11d6:	ca 01       	movw	r24, r20
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	90 70       	andi	r25, 0x00	; 0
    11dc:	88 23       	and	r24, r24
    11de:	19 f0       	breq	.+6      	; 0x11e6 <GPIO_readPin+0xf2>
				{
					pin_value=LOGIC_HIGH;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	19 c0       	rjmp	.+50     	; 0x1218 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value=LOGIC_LOW;
    11e6:	19 82       	std	Y+1, r1	; 0x01
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <GPIO_readPin+0x124>
				}
			break;
		case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num))
    11ea:	e0 e3       	ldi	r30, 0x30	; 48
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_readPin+0x10e>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_readPin+0x10a>
    1206:	ca 01       	movw	r24, r20
    1208:	81 70       	andi	r24, 0x01	; 1
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	88 23       	and	r24, r24
    120e:	19 f0       	breq	.+6      	; 0x1216 <GPIO_readPin+0x122>
				{
					pin_value=LOGIC_HIGH;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <GPIO_readPin+0x124>
				}
				else
				{
					pin_value=LOGIC_LOW;
    1216:	19 82       	std	Y+1, r1	; 0x01
				}
			break;
		}
	}
	return pin_value;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_setupPortDirection+0x6>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_setupPortDirection+0x8>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	90 f5       	brcc	.+100    	; 0x12a4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3c 83       	std	Y+4, r19	; 0x04
    1248:	2b 83       	std	Y+3, r18	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	d1 f0       	breq	.+52     	; 0x1288 <GPIO_setupPortDirection+0x5e>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <GPIO_setupPortDirection+0x3e>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 f0       	breq	.+24     	; 0x127e <GPIO_setupPortDirection+0x54>
    1266:	1e c0       	rjmp	.+60     	; 0x12a4 <GPIO_setupPortDirection+0x7a>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	81 f0       	breq	.+32     	; 0x1292 <GPIO_setupPortDirection+0x68>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	81 f0       	breq	.+32     	; 0x129c <GPIO_setupPortDirection+0x72>
    127c:	13 c0       	rjmp	.+38     	; 0x12a4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	80 83       	st	Z, r24
    1286:	0e c0       	rjmp	.+28     	; 0x12a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1288:	e7 e3       	ldi	r30, 0x37	; 55
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	80 83       	st	Z, r24
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1292:	e4 e3       	ldi	r30, 0x34	; 52
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    129c:	e1 e3       	ldi	r30, 0x31	; 49
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <GPIO_writePort+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <GPIO_writePort+0x8>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num>=NUM_OF_PORTS)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	90 f5       	brcc	.+100    	; 0x132c <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3c 83       	std	Y+4, r19	; 0x04
    12d0:	2b 83       	std	Y+3, r18	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	d1 f0       	breq	.+52     	; 0x1310 <GPIO_writePort+0x5e>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <GPIO_writePort+0x3e>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	61 f0       	breq	.+24     	; 0x1306 <GPIO_writePort+0x54>
    12ee:	1e c0       	rjmp	.+60     	; 0x132c <GPIO_writePort+0x7a>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	81 f0       	breq	.+32     	; 0x131a <GPIO_writePort+0x68>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	81 f0       	breq	.+32     	; 0x1324 <GPIO_writePort+0x72>
    1304:	13 c0       	rjmp	.+38     	; 0x132c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1306:	eb e3       	ldi	r30, 0x3B	; 59
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	0e c0       	rjmp	.+28     	; 0x132c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
    1318:	09 c0       	rjmp	.+18     	; 0x132c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    131a:	e5 e3       	ldi	r30, 0x35	; 53
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
    1322:	04 c0       	rjmp	.+8      	; 0x132c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1324:	e2 e3       	ldi	r30, 0x32	; 50
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
			break;
		}
	}

}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <GPIO_readPort+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <GPIO_readPort+0x8>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=LOGIC_LOW;
    1348:	19 82       	std	Y+1, r1	; 0x01

	if(port_num>=NUM_OF_PORTS)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	90 f5       	brcc	.+100    	; 0x13b4 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3c 83       	std	Y+4, r19	; 0x04
    1358:	2b 83       	std	Y+3, r18	; 0x03
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	d1 f0       	breq	.+52     	; 0x1398 <GPIO_readPort+0x5e>
    1364:	2b 81       	ldd	r18, Y+3	; 0x03
    1366:	3c 81       	ldd	r19, Y+4	; 0x04
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	2c f4       	brge	.+10     	; 0x1378 <GPIO_readPort+0x3e>
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	61 f0       	breq	.+24     	; 0x138e <GPIO_readPort+0x54>
    1376:	1e c0       	rjmp	.+60     	; 0x13b4 <GPIO_readPort+0x7a>
    1378:	2b 81       	ldd	r18, Y+3	; 0x03
    137a:	3c 81       	ldd	r19, Y+4	; 0x04
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	81 f0       	breq	.+32     	; 0x13a2 <GPIO_readPort+0x68>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	81 f0       	breq	.+32     	; 0x13ac <GPIO_readPort+0x72>
    138c:	13 c0       	rjmp	.+38     	; 0x13b4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value=PINA;
    138e:	e9 e3       	ldi	r30, 0x39	; 57
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	0e c0       	rjmp	.+28     	; 0x13b4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value=PINB;
    1398:	e6 e3       	ldi	r30, 0x36	; 54
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	09 c0       	rjmp	.+18     	; 0x13b4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value=PINC;
    13a2:	e3 e3       	ldi	r30, 0x33	; 51
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value=PIND;
    13ac:	e0 e3       	ldi	r30, 0x30	; 48
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	60 97       	sbiw	r28, 0x10	; 16
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	65 e0       	ldi	r22, 0x05	; 5
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	66 e0       	ldi	r22, 0x06	; 6
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	67 e0       	ldi	r22, 0x07	; 7
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	63 e0       	ldi	r22, 0x03	; 3
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	64 e0       	ldi	r22, 0x04	; 4
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	65 e0       	ldi	r22, 0x05	; 5
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1428:	1f 86       	std	Y+15, r1	; 0x0f
    142a:	b4 c0       	rjmp	.+360    	; 0x1594 <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    142c:	8f 85       	ldd	r24, Y+15	; 0x0f
    142e:	98 2f       	mov	r25, r24
    1430:	9c 5f       	subi	r25, 0xFC	; 252
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	69 2f       	mov	r22, r25
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    143c:	8f 85       	ldd	r24, Y+15	; 0x0f
    143e:	98 2f       	mov	r25, r24
    1440:	9c 5f       	subi	r25, 0xFC	; 252
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	69 2f       	mov	r22, r25
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    144c:	18 8a       	std	Y+16, r1	; 0x10
    144e:	22 c0       	rjmp	.+68     	; 0x1494 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1450:	88 89       	ldd	r24, Y+16	; 0x10
    1452:	98 2f       	mov	r25, r24
    1454:	9e 5f       	subi	r25, 0xFE	; 254
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	69 2f       	mov	r22, r25
    145a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_readPin>
    145e:	88 23       	and	r24, r24
    1460:	b1 f4       	brne	.+44     	; 0x148e <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	98 2f       	mov	r25, r24
    1472:	88 89       	ldd	r24, Y+16	; 0x10
    1474:	89 0f       	add	r24, r25
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	0e 94 cf 0a 	call	0x159e	; 0x159e <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    147c:	60 96       	adiw	r28, 0x10	; 16
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    148e:	88 89       	ldd	r24, Y+16	; 0x10
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	88 8b       	std	Y+16, r24	; 0x10
    1494:	88 89       	ldd	r24, Y+16	; 0x10
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	d8 f2       	brcs	.-74     	; 0x1450 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    149a:	8f 85       	ldd	r24, Y+15	; 0x0f
    149c:	98 2f       	mov	r25, r24
    149e:	9c 5f       	subi	r25, 0xFC	; 252
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	69 2f       	mov	r22, r25
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 ea       	ldi	r26, 0xA0	; 160
    14b0:	b0 e4       	ldi	r27, 0x40	; 64
    14b2:	8b 87       	std	Y+11, r24	; 0x0b
    14b4:	9c 87       	std	Y+12, r25	; 0x0c
    14b6:	ad 87       	std	Y+13, r26	; 0x0d
    14b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a ef       	ldi	r20, 0xFA	; 250
    14c8:	54 e4       	ldi	r21, 0x44	; 68
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	a9 87       	std	Y+9, r26	; 0x09
    14d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14da:	6f 81       	ldd	r22, Y+7	; 0x07
    14dc:	78 85       	ldd	r23, Y+8	; 0x08
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    14fc:	6f 81       	ldd	r22, Y+7	; 0x07
    14fe:	78 85       	ldd	r23, Y+8	; 0x08
    1500:	89 85       	ldd	r24, Y+9	; 0x09
    1502:	9a 85       	ldd	r25, Y+10	; 0x0a
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6b 85       	ldd	r22, Y+11	; 0x0b
    1516:	7c 85       	ldd	r23, Y+12	; 0x0c
    1518:	8d 85       	ldd	r24, Y+13	; 0x0d
    151a:	9e 85       	ldd	r25, Y+14	; 0x0e
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	0f c0       	rjmp	.+30     	; 0x155c <KEYPAD_getPressedKey+0x198>
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <KEYPAD_getPressedKey+0x186>
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <KEYPAD_getPressedKey+0x17a>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <KEYPAD_getPressedKey+0x1c2>
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    158e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	8f 87       	std	Y+15, r24	; 0x0f
    1594:	8f 85       	ldd	r24, Y+15	; 0x0f
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	08 f4       	brcc	.+2      	; 0x159c <KEYPAD_getPressedKey+0x1d8>
    159a:	48 cf       	rjmp	.-368    	; 0x142c <KEYPAD_getPressedKey+0x68>
    159c:	45 cf       	rjmp	.-374    	; 0x1428 <KEYPAD_getPressedKey+0x64>

0000159e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    15ac:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    15c2:	70 c0       	rjmp	.+224    	; 0x16a4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    15c4:	2b 81       	ldd	r18, Y+3	; 0x03
    15c6:	3c 81       	ldd	r19, Y+4	; 0x04
    15c8:	29 30       	cpi	r18, 0x09	; 9
    15ca:	31 05       	cpc	r19, r1
    15cc:	5c f5       	brge	.+86     	; 0x1624 <KEYPAD_4x4_adjustKeyNumber+0x86>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <KEYPAD_4x4_adjustKeyNumber+0x3c>
    15d8:	59 c0       	rjmp	.+178    	; 0x168c <KEYPAD_4x4_adjustKeyNumber+0xee>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	25 30       	cpi	r18, 0x05	; 5
    15e0:	31 05       	cpc	r19, r1
    15e2:	9c f4       	brge	.+38     	; 0x160a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    15ee:	48 c0       	rjmp	.+144    	; 0x1680 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	23 30       	cpi	r18, 0x03	; 3
    15f6:	31 05       	cpc	r19, r1
    15f8:	0c f0       	brlt	.+2      	; 0x15fc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    15fa:	45 c0       	rjmp	.+138    	; 0x1686 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1606:	39 c0       	rjmp	.+114    	; 0x167a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1608:	67 c0       	rjmp	.+206    	; 0x16d8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	3c 81       	ldd	r19, Y+4	; 0x04
    160e:	26 30       	cpi	r18, 0x06	; 6
    1610:	31 05       	cpc	r19, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1614:	41 c0       	rjmp	.+130    	; 0x1698 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	87 30       	cpi	r24, 0x07	; 7
    161c:	91 05       	cpc	r25, r1
    161e:	0c f0       	brlt	.+2      	; 0x1622 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1620:	3e c0       	rjmp	.+124    	; 0x169e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1622:	37 c0       	rjmp	.+110    	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	2c 30       	cpi	r18, 0x0C	; 12
    162a:	31 05       	cpc	r19, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <KEYPAD_4x4_adjustKeyNumber+0x92>
    162e:	46 c0       	rjmp	.+140    	; 0x16bc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	8d 30       	cpi	r24, 0x0D	; 13
    1636:	91 05       	cpc	r25, r1
    1638:	5c f4       	brge	.+22     	; 0x1650 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	2a 30       	cpi	r18, 0x0A	; 10
    1640:	31 05       	cpc	r19, r1
    1642:	b1 f1       	breq	.+108    	; 0x16b0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	8b 30       	cpi	r24, 0x0B	; 11
    164a:	91 05       	cpc	r25, r1
    164c:	a4 f5       	brge	.+104    	; 0x16b6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    164e:	2d c0       	rjmp	.+90     	; 0x16aa <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	2e 30       	cpi	r18, 0x0E	; 14
    1656:	31 05       	cpc	r19, r1
    1658:	b9 f1       	breq	.+110    	; 0x16c8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	8e 30       	cpi	r24, 0x0E	; 14
    1660:	91 05       	cpc	r25, r1
    1662:	7c f1       	brlt	.+94     	; 0x16c2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	2f 30       	cpi	r18, 0x0F	; 15
    166a:	31 05       	cpc	r19, r1
    166c:	79 f1       	breq	.+94     	; 0x16cc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	80 31       	cpi	r24, 0x10	; 16
    1674:	91 05       	cpc	r25, r1
    1676:	69 f1       	breq	.+90     	; 0x16d2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1678:	2f c0       	rjmp	.+94     	; 0x16d8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    167a:	87 e0       	ldi	r24, 0x07	; 7
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	2e c0       	rjmp	.+92     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1680:	88 e0       	ldi	r24, 0x08	; 8
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	2b c0       	rjmp	.+86     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1686:	89 e0       	ldi	r24, 0x09	; 9
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	28 c0       	rjmp	.+80     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    168c:	85 e2       	ldi	r24, 0x25	; 37
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	25 c0       	rjmp	.+74     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	22 c0       	rjmp	.+68     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1698:	85 e0       	ldi	r24, 0x05	; 5
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	1f c0       	rjmp	.+62     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    169e:	86 e0       	ldi	r24, 0x06	; 6
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	1c c0       	rjmp	.+56     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    16a4:	8a e2       	ldi	r24, 0x2A	; 42
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	19 c0       	rjmp	.+50     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	13 c0       	rjmp	.+38     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    16bc:	8d e2       	ldi	r24, 0x2D	; 45
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    16c2:	8d e0       	ldi	r24, 0x0D	; 13
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	08 c0       	rjmp	.+16     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    16cc:	8d e3       	ldi	r24, 0x3D	; 61
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    16d2:	8b e2       	ldi	r24, 0x2B	; 43
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	2e 97       	sbiw	r28, 0x0e	; 14
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 a4 06 	call	0xd48	; 0xd48 <GPIO_setupPinDirection>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 ea       	ldi	r26, 0xA0	; 160
    171a:	b1 e4       	ldi	r27, 0x41	; 65
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	98 87       	std	Y+8, r25	; 0x08
    1740:	a9 87       	std	Y+9, r26	; 0x09
    1742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_init+0x7a>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_init+0xda>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_init+0xc8>
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_init+0xbc>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_init+0x104>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	6f ef       	ldi	r22, 0xFF	; 255
    17fc:	0e 94 15 09 	call	0x122a	; 0x122a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1800:	88 e3       	ldi	r24, 0x38	; 56
    1802:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1806:	8c e0       	ldi	r24, 0x0C	; 12
    1808:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_sendCommand>
}
    1812:	2e 96       	adiw	r28, 0x0e	; 14
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	e9 97       	sbiw	r28, 0x39	; 57
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8d ab       	std	Y+53, r24	; 0x35
    184e:	9e ab       	std	Y+54, r25	; 0x36
    1850:	af ab       	std	Y+55, r26	; 0x37
    1852:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6d a9       	ldd	r22, Y+53	; 0x35
    1856:	7e a9       	ldd	r23, Y+54	; 0x36
    1858:	8f a9       	ldd	r24, Y+55	; 0x37
    185a:	98 ad       	ldd	r25, Y+56	; 0x38
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	89 ab       	std	Y+49, r24	; 0x31
    186e:	9a ab       	std	Y+50, r25	; 0x32
    1870:	ab ab       	std	Y+51, r26	; 0x33
    1872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1874:	69 a9       	ldd	r22, Y+49	; 0x31
    1876:	7a a9       	ldd	r23, Y+50	; 0x32
    1878:	8b a9       	ldd	r24, Y+51	; 0x33
    187a:	9c a9       	ldd	r25, Y+52	; 0x34
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_sendCommand+0x72>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6d a9       	ldd	r22, Y+53	; 0x35
    18b0:	7e a9       	ldd	r23, Y+54	; 0x36
    18b2:	8f a9       	ldd	r24, Y+55	; 0x37
    18b4:	98 ad       	ldd	r25, Y+56	; 0x38
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	98 ab       	std	Y+48, r25	; 0x30
    18d4:	8f a7       	std	Y+47, r24	; 0x2f
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_sendCommand+0xd2>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9e a7       	std	Y+46, r25	; 0x2e
    18de:	8d a7       	std	Y+45, r24	; 0x2d
    18e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_sendCommand+0xc0>
    18e8:	9e a7       	std	Y+46, r25	; 0x2e
    18ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	98 ab       	std	Y+48, r25	; 0x30
    18f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f8:	98 a9       	ldd	r25, Y+48	; 0x30
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_sendCommand+0xb4>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	69 a9       	ldd	r22, Y+49	; 0x31
    1902:	7a a9       	ldd	r23, Y+50	; 0x32
    1904:	8b a9       	ldd	r24, Y+51	; 0x33
    1906:	9c a9       	ldd	r25, Y+52	; 0x34
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	8f a5       	ldd	r24, Y+47	; 0x2f
    1916:	98 a9       	ldd	r25, Y+48	; 0x30
    1918:	9c a7       	std	Y+44, r25	; 0x2c
    191a:	8b a7       	std	Y+43, r24	; 0x2b
    191c:	8b a5       	ldd	r24, Y+43	; 0x2b
    191e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_sendCommand+0xfc>
    1924:	9c a7       	std	Y+44, r25	; 0x2c
    1926:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e8       	ldi	r26, 0x80	; 128
    1938:	bf e3       	ldi	r27, 0x3F	; 63
    193a:	8f a3       	std	Y+39, r24	; 0x27
    193c:	98 a7       	std	Y+40, r25	; 0x28
    193e:	a9 a7       	std	Y+41, r26	; 0x29
    1940:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6f a1       	ldd	r22, Y+39	; 0x27
    1944:	78 a5       	ldd	r23, Y+40	; 0x28
    1946:	89 a5       	ldd	r24, Y+41	; 0x29
    1948:	9a a5       	ldd	r25, Y+42	; 0x2a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8b a3       	std	Y+35, r24	; 0x23
    195c:	9c a3       	std	Y+36, r25	; 0x24
    195e:	ad a3       	std	Y+37, r26	; 0x25
    1960:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1962:	6b a1       	ldd	r22, Y+35	; 0x23
    1964:	7c a1       	ldd	r23, Y+36	; 0x24
    1966:	8d a1       	ldd	r24, Y+37	; 0x25
    1968:	9e a1       	ldd	r25, Y+38	; 0x26
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <LCD_sendCommand+0x160>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1984:	6b a1       	ldd	r22, Y+35	; 0x23
    1986:	7c a1       	ldd	r23, Y+36	; 0x24
    1988:	8d a1       	ldd	r24, Y+37	; 0x25
    198a:	9e a1       	ldd	r25, Y+38	; 0x26
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6f a1       	ldd	r22, Y+39	; 0x27
    199e:	78 a5       	ldd	r23, Y+40	; 0x28
    19a0:	89 a5       	ldd	r24, Y+41	; 0x29
    19a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9a a3       	std	Y+34, r25	; 0x22
    19c2:	89 a3       	std	Y+33, r24	; 0x21
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <LCD_sendCommand+0x1c0>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 a3       	std	Y+32, r25	; 0x20
    19cc:	8f 8f       	std	Y+31, r24	; 0x1f
    19ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d0:	98 a1       	ldd	r25, Y+32	; 0x20
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_sendCommand+0x1ae>
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	89 a1       	ldd	r24, Y+33	; 0x21
    19dc:	9a a1       	ldd	r25, Y+34	; 0x22
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	9a a1       	ldd	r25, Y+34	; 0x22
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <LCD_sendCommand+0x1a2>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6b a1       	ldd	r22, Y+35	; 0x23
    19f0:	7c a1       	ldd	r23, Y+36	; 0x24
    19f2:	8d a1       	ldd	r24, Y+37	; 0x25
    19f4:	9e a1       	ldd	r25, Y+38	; 0x26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	9e 8f       	std	Y+30, r25	; 0x1e
    1a08:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_sendCommand+0x1ea>
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	69 ad       	ldd	r22, Y+57	; 0x39
    1a1a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <GPIO_writePort>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	89 8f       	std	Y+25, r24	; 0x19
    1a28:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a ef       	ldi	r20, 0xFA	; 250
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	9e 8b       	std	Y+22, r25	; 0x16
    1a4a:	af 8b       	std	Y+23, r26	; 0x17
    1a4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a50:	7e 89       	ldd	r23, Y+22	; 0x16
    1a52:	8f 89       	ldd	r24, Y+23	; 0x17
    1a54:	98 8d       	ldd	r25, Y+24	; 0x18
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_sendCommand+0x2ac>
    1ab2:	88 ec       	ldi	r24, 0xC8	; 200
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9a 8b       	std	Y+18, r25	; 0x12
    1ab8:	89 8b       	std	Y+17, r24	; 0x11
    1aba:	89 89       	ldd	r24, Y+17	; 0x11
    1abc:	9a 89       	ldd	r25, Y+18	; 0x12
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_sendCommand+0x29a>
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_sendCommand+0x28e>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9c 8b       	std	Y+20, r25	; 0x14
    1aec:	8b 8b       	std	Y+19, r24	; 0x13
    1aee:	8b 89       	ldd	r24, Y+19	; 0x13
    1af0:	9c 89       	ldd	r25, Y+20	; 0x14
    1af2:	98 8b       	std	Y+16, r25	; 0x10
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
    1af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af8:	98 89       	ldd	r25, Y+16	; 0x10
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_sendCommand+0x2d6>
    1afe:	98 8b       	std	Y+16, r25	; 0x10
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e8       	ldi	r26, 0x80	; 128
    1b12:	bf e3       	ldi	r27, 0x3F	; 63
    1b14:	8b 87       	std	Y+11, r24	; 0x0b
    1b16:	9c 87       	std	Y+12, r25	; 0x0c
    1b18:	ad 87       	std	Y+13, r26	; 0x0d
    1b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a ef       	ldi	r20, 0xFA	; 250
    1b2a:	54 e4       	ldi	r21, 0x44	; 68
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8f 83       	std	Y+7, r24	; 0x07
    1b36:	98 87       	std	Y+8, r25	; 0x08
    1b38:	a9 87       	std	Y+9, r26	; 0x09
    1b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_sendCommand+0x39a>
    1ba0:	88 ec       	ldi	r24, 0xC8	; 200
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_sendCommand+0x388>
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_sendCommand+0x37c>
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_sendCommand+0x3c4>
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1bf0:	e9 96       	adiw	r28, 0x39	; 57
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	e9 97       	sbiw	r28, 0x39	; 57
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 e8       	ldi	r26, 0x80	; 128
    1c28:	bf e3       	ldi	r27, 0x3F	; 63
    1c2a:	8d ab       	std	Y+53, r24	; 0x35
    1c2c:	9e ab       	std	Y+54, r25	; 0x36
    1c2e:	af ab       	std	Y+55, r26	; 0x37
    1c30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	6d a9       	ldd	r22, Y+53	; 0x35
    1c34:	7e a9       	ldd	r23, Y+54	; 0x36
    1c36:	8f a9       	ldd	r24, Y+55	; 0x37
    1c38:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a ef       	ldi	r20, 0xFA	; 250
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	89 ab       	std	Y+49, r24	; 0x31
    1c4c:	9a ab       	std	Y+50, r25	; 0x32
    1c4e:	ab ab       	std	Y+51, r26	; 0x33
    1c50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c52:	69 a9       	ldd	r22, Y+49	; 0x31
    1c54:	7a a9       	ldd	r23, Y+50	; 0x32
    1c56:	8b a9       	ldd	r24, Y+51	; 0x33
    1c58:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	98 ab       	std	Y+48, r25	; 0x30
    1c70:	8f a7       	std	Y+47, r24	; 0x2f
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c74:	69 a9       	ldd	r22, Y+49	; 0x31
    1c76:	7a a9       	ldd	r23, Y+50	; 0x32
    1c78:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c90:	8f a9       	ldd	r24, Y+55	; 0x37
    1c92:	98 ad       	ldd	r25, Y+56	; 0x38
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	98 ab       	std	Y+48, r25	; 0x30
    1cb2:	8f a7       	std	Y+47, r24	; 0x2f
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <LCD_displayCharacter+0xd2>
    1cb6:	88 ec       	ldi	r24, 0xC8	; 200
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e a7       	std	Y+46, r25	; 0x2e
    1cbc:	8d a7       	std	Y+45, r24	; 0x2d
    1cbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_displayCharacter+0xc0>
    1cc6:	9e a7       	std	Y+46, r25	; 0x2e
    1cc8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	98 ab       	std	Y+48, r25	; 0x30
    1cd2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <LCD_displayCharacter+0xb4>
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	98 ab       	std	Y+48, r25	; 0x30
    1cf0:	8f a7       	std	Y+47, r24	; 0x2f
    1cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf6:	9c a7       	std	Y+44, r25	; 0x2c
    1cf8:	8b a7       	std	Y+43, r24	; 0x2b
    1cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_displayCharacter+0xfc>
    1d02:	9c a7       	std	Y+44, r25	; 0x2c
    1d04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e8       	ldi	r26, 0x80	; 128
    1d16:	bf e3       	ldi	r27, 0x3F	; 63
    1d18:	8f a3       	std	Y+39, r24	; 0x27
    1d1a:	98 a7       	std	Y+40, r25	; 0x28
    1d1c:	a9 a7       	std	Y+41, r26	; 0x29
    1d1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	6f a1       	ldd	r22, Y+39	; 0x27
    1d22:	78 a5       	ldd	r23, Y+40	; 0x28
    1d24:	89 a5       	ldd	r24, Y+41	; 0x29
    1d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a ef       	ldi	r20, 0xFA	; 250
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8b a3       	std	Y+35, r24	; 0x23
    1d3a:	9c a3       	std	Y+36, r25	; 0x24
    1d3c:	ad a3       	std	Y+37, r26	; 0x25
    1d3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d40:	6b a1       	ldd	r22, Y+35	; 0x23
    1d42:	7c a1       	ldd	r23, Y+36	; 0x24
    1d44:	8d a1       	ldd	r24, Y+37	; 0x25
    1d46:	9e a1       	ldd	r25, Y+38	; 0x26
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9a a3       	std	Y+34, r25	; 0x22
    1d5e:	89 a3       	std	Y+33, r24	; 0x21
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d62:	6b a1       	ldd	r22, Y+35	; 0x23
    1d64:	7c a1       	ldd	r23, Y+36	; 0x24
    1d66:	8d a1       	ldd	r24, Y+37	; 0x25
    1d68:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9a a3       	std	Y+34, r25	; 0x22
    1da0:	89 a3       	std	Y+33, r24	; 0x21
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <LCD_displayCharacter+0x1c0>
    1da4:	88 ec       	ldi	r24, 0xC8	; 200
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	98 a3       	std	Y+32, r25	; 0x20
    1daa:	8f 8f       	std	Y+31, r24	; 0x1f
    1dac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dae:	98 a1       	ldd	r25, Y+32	; 0x20
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <LCD_displayCharacter+0x1ae>
    1db4:	98 a3       	std	Y+32, r25	; 0x20
    1db6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dba:	9a a1       	ldd	r25, Y+34	; 0x22
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9a a3       	std	Y+34, r25	; 0x22
    1dc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <LCD_displayCharacter+0x1a2>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dce:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9a a3       	std	Y+34, r25	; 0x22
    1dde:	89 a3       	std	Y+33, r24	; 0x21
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	9e 8f       	std	Y+30, r25	; 0x1e
    1de6:	8d 8f       	std	Y+29, r24	; 0x1d
    1de8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <LCD_displayCharacter+0x1ea>
    1df0:	9e 8f       	std	Y+30, r25	; 0x1e
    1df2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	69 ad       	ldd	r22, Y+57	; 0x39
    1df8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <GPIO_writePort>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e8       	ldi	r26, 0x80	; 128
    1e02:	bf e3       	ldi	r27, 0x3F	; 63
    1e04:	89 8f       	std	Y+25, r24	; 0x19
    1e06:	9a 8f       	std	Y+26, r25	; 0x1a
    1e08:	ab 8f       	std	Y+27, r26	; 0x1b
    1e0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	8d 8b       	std	Y+21, r24	; 0x15
    1e26:	9e 8b       	std	Y+22, r25	; 0x16
    1e28:	af 8b       	std	Y+23, r26	; 0x17
    1e2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e30:	8f 89       	ldd	r24, Y+23	; 0x17
    1e32:	98 8d       	ldd	r25, Y+24	; 0x18
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9c 8b       	std	Y+20, r25	; 0x14
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
    1e4c:	3f c0       	rjmp	.+126    	; 0x1ecc <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e50:	7e 89       	ldd	r23, Y+22	; 0x16
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	98 8d       	ldd	r25, Y+24	; 0x18
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	4c f5       	brge	.+82     	; 0x1eb8 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	69 8d       	ldd	r22, Y+25	; 0x19
    1e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9c 8b       	std	Y+20, r25	; 0x14
    1e8c:	8b 8b       	std	Y+19, r24	; 0x13
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_displayCharacter+0x2ac>
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9a 8b       	std	Y+18, r25	; 0x12
    1e96:	89 8b       	std	Y+17, r24	; 0x11
    1e98:	89 89       	ldd	r24, Y+17	; 0x11
    1e9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_displayCharacter+0x29a>
    1ea0:	9a 8b       	std	Y+18, r25	; 0x12
    1ea2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	9c 8b       	std	Y+20, r25	; 0x14
    1eac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_displayCharacter+0x28e>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eba:	7e 89       	ldd	r23, Y+22	; 0x16
    1ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ebe:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9c 8b       	std	Y+20, r25	; 0x14
    1eca:	8b 8b       	std	Y+19, r24	; 0x13
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed0:	98 8b       	std	Y+16, r25	; 0x10
    1ed2:	8f 87       	std	Y+15, r24	; 0x0f
    1ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed6:	98 89       	ldd	r25, Y+16	; 0x10
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_displayCharacter+0x2d6>
    1edc:	98 8b       	std	Y+16, r25	; 0x10
    1ede:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <GPIO_writePin>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	9c 87       	std	Y+12, r25	; 0x0c
    1ef6:	ad 87       	std	Y+13, r26	; 0x0d
    1ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8f 83       	std	Y+7, r24	; 0x07
    1f14:	98 87       	std	Y+8, r25	; 0x08
    1f16:	a9 87       	std	Y+9, r26	; 0x09
    1f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_displayCharacter+0x39a>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_displayCharacter+0x388>
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <LCD_displayCharacter+0x37c>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_displayCharacter+0x3c4>
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1fce:	e9 96       	adiw	r28, 0x39	; 57
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <LCD_displayString+0x6>
    1fe6:	0f 92       	push	r0
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	9b 83       	std	Y+3, r25	; 0x03
    1fee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ff0:	19 82       	std	Y+1, r1	; 0x01
    1ff2:	0e c0       	rjmp	.+28     	; 0x2010 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	fc 01       	movw	r30, r24
    2000:	e2 0f       	add	r30, r18
    2002:	f3 1f       	adc	r31, r19
    2004:	80 81       	ld	r24, Z
    2006:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LCD_displayCharacter>
		i++;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	fc 01       	movw	r30, r24
    201c:	e2 0f       	add	r30, r18
    201e:	f3 1f       	adc	r31, r19
    2020:	80 81       	ld	r24, Z
    2022:	88 23       	and	r24, r24
    2024:	39 f7       	brne	.-50     	; 0x1ff4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	00 d0       	rcall	.+0      	; 0x2038 <LCD_moveCursor+0x6>
    2038:	00 d0       	rcall	.+0      	; 0x203a <LCD_moveCursor+0x8>
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	8a 83       	std	Y+2, r24	; 0x02
    2042:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	3d 83       	std	Y+5, r19	; 0x05
    204c:	2c 83       	std	Y+4, r18	; 0x04
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	91 05       	cpc	r25, r1
    2056:	c1 f0       	breq	.+48     	; 0x2088 <LCD_moveCursor+0x56>
    2058:	2c 81       	ldd	r18, Y+4	; 0x04
    205a:	3d 81       	ldd	r19, Y+5	; 0x05
    205c:	22 30       	cpi	r18, 0x02	; 2
    205e:	31 05       	cpc	r19, r1
    2060:	2c f4       	brge	.+10     	; 0x206c <LCD_moveCursor+0x3a>
    2062:	8c 81       	ldd	r24, Y+4	; 0x04
    2064:	9d 81       	ldd	r25, Y+5	; 0x05
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	61 f0       	breq	.+24     	; 0x2082 <LCD_moveCursor+0x50>
    206a:	19 c0       	rjmp	.+50     	; 0x209e <LCD_moveCursor+0x6c>
    206c:	2c 81       	ldd	r18, Y+4	; 0x04
    206e:	3d 81       	ldd	r19, Y+5	; 0x05
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	69 f0       	breq	.+26     	; 0x2090 <LCD_moveCursor+0x5e>
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	83 30       	cpi	r24, 0x03	; 3
    207c:	91 05       	cpc	r25, r1
    207e:	61 f0       	breq	.+24     	; 0x2098 <LCD_moveCursor+0x66>
    2080:	0e c0       	rjmp	.+28     	; 0x209e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	0b c0       	rjmp	.+22     	; 0x209e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	80 5c       	subi	r24, 0xC0	; 192
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	07 c0       	rjmp	.+14     	; 0x209e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	80 5f       	subi	r24, 0xF0	; 240
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	03 c0       	rjmp	.+6      	; 0x209e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	80 5b       	subi	r24, 0xB0	; 176
    209c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	80 68       	ori	r24, 0x80	; 128
    20a2:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_sendCommand>
}
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <LCD_displayStringRowColumn+0x6>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LCD_displayStringRowColumn+0x8>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	6a 83       	std	Y+2, r22	; 0x02
    20c6:	5c 83       	std	Y+4, r21	; 0x04
    20c8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	6a 81       	ldd	r22, Y+2	; 0x02
    20ce:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	62 97       	sbiw	r28, 0x12	; 18
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	9a 8b       	std	Y+18, r25	; 0x12
    20fe:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2100:	89 89       	ldd	r24, Y+17	; 0x11
    2102:	9a 89       	ldd	r25, Y+18	; 0x12
    2104:	9e 01       	movw	r18, r28
    2106:	2f 5f       	subi	r18, 0xFF	; 255
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	b9 01       	movw	r22, r18
    210c:	4a e0       	ldi	r20, 0x0A	; 10
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
}
    211c:	62 96       	adiw	r28, 0x12	; 18
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_sendCommand>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <main>:
UART_ConfigType UART_HMI={UART_8_Bits,UART_PARITY_EVEN,UART_STOPBIT_1_BIT,9600,UART_ASYNCHRONOUS};

//Initialization structure for TIMER1
Timer1_ConfigType Timer1_ConfigStruct = {0,31250,F_CPU_256,CTC_OCR};

int main(){
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <main+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62

	//initializing drivers
	LCD_init();
    214c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <LCD_init>
	UART_init(&UART_HMI);
    2150:	8e e5       	ldi	r24, 0x5E	; 94
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	0e 94 4f 14 	call	0x289e	; 0x289e <UART_init>

	//Show the first LCD message
	LCD_displayString("Pls enter pass:");
    2158:	80 e6       	ldi	r24, 0x60	; 96
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
	LCD_moveCursor(1,0); /* Move the cursor to the second row */
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>

	///////////////////////////////////***///////////////////////////////////
	///////////////////////////////////***///////////////////////////////////
	///////////////////////////////////***///////////////////////////////////
	//Enable global interrupt	Enable global interrupt	Enable global interrupt
	SREG |= (1<<7);
    2168:	af e5       	ldi	r26, 0x5F	; 95
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ef e5       	ldi	r30, 0x5F	; 95
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	80 68       	ori	r24, 0x80	; 128
    2174:	8c 93       	st	X, r24


	for(;;){

		//the main switch that determines in which state the program runs
		switch(stage){
    2176:	80 91 70 01 	lds	r24, 0x0170
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	3a 83       	std	Y+2, r19	; 0x02
    2180:	29 83       	std	Y+1, r18	; 0x01
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	84 30       	cpi	r24, 0x04	; 4
    2188:	91 05       	cpc	r25, r1
    218a:	09 f4       	brne	.+2      	; 0x218e <main+0x4c>
    218c:	96 c0       	rjmp	.+300    	; 0x22ba <main+0x178>
    218e:	29 81       	ldd	r18, Y+1	; 0x01
    2190:	3a 81       	ldd	r19, Y+2	; 0x02
    2192:	25 30       	cpi	r18, 0x05	; 5
    2194:	31 05       	cpc	r19, r1
    2196:	dc f4       	brge	.+54     	; 0x21ce <main+0x8c>
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	91 05       	cpc	r25, r1
    21a0:	91 f1       	breq	.+100    	; 0x2206 <main+0xc4>
    21a2:	29 81       	ldd	r18, Y+1	; 0x01
    21a4:	3a 81       	ldd	r19, Y+2	; 0x02
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <main+0x74>
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	31 f1       	breq	.+76     	; 0x2200 <main+0xbe>
    21b4:	e0 cf       	rjmp	.-64     	; 0x2176 <main+0x34>
    21b6:	29 81       	ldd	r18, Y+1	; 0x01
    21b8:	3a 81       	ldd	r19, Y+2	; 0x02
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	31 f1       	breq	.+76     	; 0x220c <main+0xca>
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	83 30       	cpi	r24, 0x03	; 3
    21c6:	91 05       	cpc	r25, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <main+0x8a>
    21ca:	5b c0       	rjmp	.+182    	; 0x2282 <main+0x140>
    21cc:	d4 cf       	rjmp	.-88     	; 0x2176 <main+0x34>
    21ce:	29 81       	ldd	r18, Y+1	; 0x01
    21d0:	3a 81       	ldd	r19, Y+2	; 0x02
    21d2:	26 30       	cpi	r18, 0x06	; 6
    21d4:	31 05       	cpc	r19, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <main+0x98>
    21d8:	a1 c0       	rjmp	.+322    	; 0x231c <main+0x1da>
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	86 30       	cpi	r24, 0x06	; 6
    21e0:	91 05       	cpc	r25, r1
    21e2:	0c f4       	brge	.+2      	; 0x21e6 <main+0xa4>
    21e4:	6d c0       	rjmp	.+218    	; 0x22c0 <main+0x17e>
    21e6:	29 81       	ldd	r18, Y+1	; 0x01
    21e8:	3a 81       	ldd	r19, Y+2	; 0x02
    21ea:	27 30       	cpi	r18, 0x07	; 7
    21ec:	31 05       	cpc	r19, r1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <main+0xb0>
    21f0:	98 c0       	rjmp	.+304    	; 0x2322 <main+0x1e0>
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	88 30       	cpi	r24, 0x08	; 8
    21f8:	91 05       	cpc	r25, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <main+0xbc>
    21fc:	b6 c0       	rjmp	.+364    	; 0x236a <main+0x228>
    21fe:	bb cf       	rjmp	.-138    	; 0x2176 <main+0x34>

		case 0:				//creating password 1st time
			enter_password();
    2200:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <enter_password>
    2204:	b8 cf       	rjmp	.-144    	; 0x2176 <main+0x34>
			break;


		case 1:				//creating password 2st time
			enter_password();
    2206:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <enter_password>
    220a:	b5 cf       	rjmp	.-150    	; 0x2176 <main+0x34>
			break;

		case 2:				//waiting for order from CONTROL_ECU
			UART_recievedData=UART_recieveByte();
    220c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <UART_recieveByte>
    2210:	80 93 79 01 	sts	0x0179, r24
			if(UART_recievedData==0){		//passwords don't match
    2214:	80 91 79 01 	lds	r24, 0x0179
    2218:	88 23       	and	r24, r24
    221a:	01 f5       	brne	.+64     	; 0x225c <main+0x11a>
				LCD_clearScreen();
    221c:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				LCD_displayString("passwords don't");
    2220:	80 e7       	ldi	r24, 0x70	; 112
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "match");
    2228:	20 e8       	ldi	r18, 0x80	; 128
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	a9 01       	movw	r20, r18
    2232:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_displayStringRowColumn>
				Timer_1_delay(1);
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>

				LCD_clearScreen();
    2242:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				LCD_displayString("Pls enter pass:");
    2246:	80 e6       	ldi	r24, 0x60	; 96
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
				LCD_moveCursor(1,0); /* Move the cursor to the second row */
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>

				//Reset the stage so the user can enter the password again
				stage=0;
    2256:	10 92 70 01 	sts	0x0170, r1
    225a:	8d cf       	rjmp	.-230    	; 0x2176 <main+0x34>


			}else if(UART_recievedData==1){	//passwords match
    225c:	80 91 79 01 	lds	r24, 0x0179
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	09 f0       	breq	.+2      	; 0x2266 <main+0x124>
    2264:	88 cf       	rjmp	.-240    	; 0x2176 <main+0x34>
				LCD_displayString("passwords match");
    2266:	86 e8       	ldi	r24, 0x86	; 134
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
				Timer_1_delay(1);
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>

				//The two passwords match and password creation is complete so move to the user choice stage
				stage=3;
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	80 93 70 01 	sts	0x0170, r24
    2280:	7a cf       	rjmp	.-268    	; 0x2176 <main+0x34>
			}
			break;

		case 3:				//Check user choice (open door or change password)
			LCD_clearScreen();
    2282:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    2286:	26 e9       	ldi	r18, 0x96	; 150
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	a9 01       	movw	r20, r18
    2290:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    2294:	24 ea       	ldi	r18, 0xA4	; 164
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	a9 01       	movw	r20, r18
    229e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_displayStringRowColumn>

			//Reset the password array counter
			i=0;
    22a2:	10 92 6f 01 	sts	0x016F, r1

			//Take the input from user
			enter_doorOrChange_choice();
    22a6:	0e 94 06 13 	call	0x260c	; 0x260c <enter_doorOrChange_choice>
			dummy_1=enter_doorOrChange_choice_return;
    22aa:	80 91 77 01 	lds	r24, 0x0177
    22ae:	80 93 78 01 	sts	0x0178, r24

			//User selected a choice so move to the next stage and make him enter the password
			stage = 4;
    22b2:	84 e0       	ldi	r24, 0x04	; 4
    22b4:	80 93 70 01 	sts	0x0170, r24
    22b8:	5e cf       	rjmp	.-324    	; 0x2176 <main+0x34>
			break;

		case 4:				//Checking password to either open door or change password
			enter_password();
    22ba:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <enter_password>
    22be:	5b cf       	rjmp	.-330    	; 0x2176 <main+0x34>

			break;

		case 5:				//waiting for order from CONTROL_ECU

			UART_recievedData=UART_recieveByte();
    22c0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <UART_recieveByte>
    22c4:	80 93 79 01 	sts	0x0179, r24

			if(UART_recievedData==0){		//passwords don't match
    22c8:	80 91 79 01 	lds	r24, 0x0179
    22cc:	88 23       	and	r24, r24
    22ce:	71 f4       	brne	.+28     	; 0x22ec <main+0x1aa>

				LCD_clearScreen();
    22d0:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				LCD_displayString("Pls enter pass:");
    22d4:	80 e6       	ldi	r24, 0x60	; 96
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
				LCD_moveCursor(1,0); /* Move the cursor to the second row */
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>

				//User entered a wrong password so ask him again
				stage=6;
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	80 93 70 01 	sts	0x0170, r24
    22ea:	45 cf       	rjmp	.-374    	; 0x2176 <main+0x34>

			}else if(UART_recievedData==1){	//passwords match
    22ec:	80 91 79 01 	lds	r24, 0x0179
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <main+0x1b4>
    22f4:	40 cf       	rjmp	.-384    	; 0x2176 <main+0x34>
				LCD_clearScreen();
    22f6:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				LCD_displayString("passwords match");
    22fa:	86 e8       	ldi	r24, 0x86	; 134
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>

				Timer_1_delay(1);
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>

				//Tell the control ECU that the choice is ready to be operated
				UART_sendByte(dummy_1);
    230e:	80 91 78 01 	lds	r24, 0x0178
    2312:	0e 94 ee 14 	call	0x29dc	; 0x29dc <UART_sendByte>
				operate_choice();
    2316:	0e 94 c2 13 	call	0x2784	; 0x2784 <operate_choice>
    231a:	2d cf       	rjmp	.-422    	; 0x2176 <main+0x34>
			break;


		case 6:			//wrong password

			enter_password();
    231c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <enter_password>
    2320:	2a cf       	rjmp	.-428    	; 0x2176 <main+0x34>

			break;

		case 7:			//confirm if password is wrong or right
			UART_recievedData=UART_recieveByte();
    2322:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <UART_recieveByte>
    2326:	80 93 79 01 	sts	0x0179, r24


			if(UART_recievedData==0){		//passwords don't match
    232a:	80 91 79 01 	lds	r24, 0x0179
    232e:	88 23       	and	r24, r24
    2330:	71 f4       	brne	.+28     	; 0x234e <main+0x20c>

				LCD_clearScreen();
    2332:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				LCD_displayString("Pls enter pass:");
    2336:	80 e6       	ldi	r24, 0x60	; 96
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
				LCD_moveCursor(1,0); /* Move the cursor to the second row */
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>

				//Password is wrong again so ask the user to enter it again
				stage=6;
    2346:	86 e0       	ldi	r24, 0x06	; 6
    2348:	80 93 70 01 	sts	0x0170, r24
    234c:	14 cf       	rjmp	.-472    	; 0x2176 <main+0x34>

			}else if(UART_recievedData==1){		//passwords finally match
    234e:	80 91 79 01 	lds	r24, 0x0179
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	31 f4       	brne	.+12     	; 0x2362 <main+0x220>

				//Password is right so operate the user's choice
				operate_choice();
    2356:	0e 94 c2 13 	call	0x2784	; 0x2784 <operate_choice>

				//Go back to the main menu
				stage = 3;
    235a:	83 e0       	ldi	r24, 0x03	; 3
    235c:	80 93 70 01 	sts	0x0170, r24
    2360:	0a cf       	rjmp	.-492    	; 0x2176 <main+0x34>
			}else{

				//Password is wrong for the third time so move to the alarm state
				stage = 8;
    2362:	88 e0       	ldi	r24, 0x08	; 8
    2364:	80 93 70 01 	sts	0x0170, r24
    2368:	06 cf       	rjmp	.-500    	; 0x2176 <main+0x34>
			}
			break;

		case 8:		//locked + alarm
			LCD_clearScreen();
    236a:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
			LCD_displayString("Error");
    236e:	84 eb       	ldi	r24, 0xB4	; 180
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
			Timer_1_delay(1);
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>

			//Wait for an order from the control ECU
			UART_recievedData=UART_recieveByte();
    2382:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <UART_recieveByte>
    2386:	80 93 79 01 	sts	0x0179, r24
			if(UART_recievedData==1){		//locked state and alarm time have elapsed
    238a:	80 91 79 01 	lds	r24, 0x0179
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	09 f0       	breq	.+2      	; 0x2394 <main+0x252>
    2392:	f1 ce       	rjmp	.-542    	; 0x2176 <main+0x34>

				//Go back to the main choice menu
				stage = 3;
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	80 93 70 01 	sts	0x0170, r24
				LCD_clearScreen();
    239a:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
    239e:	eb ce       	rjmp	.-554    	; 0x2176 <main+0x34>

000023a0 <enter_password>:

/*
 * Description : Take the input password from the user and store it in an array
 *
 */
void enter_password(void){
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	2e 97       	sbiw	r28, 0x0e	; 14
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61

	//Take input from the keypad
	pressedKey = KEYPAD_getPressedKey();
    23b4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <KEYPAD_getPressedKey>
    23b8:	80 93 6e 01 	sts	0x016E, r24

	//Store the input character taken from keypad in the array in index "i"
	entered_password[i]=pressedKey;
    23bc:	80 91 6f 01 	lds	r24, 0x016F
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	20 91 6e 01 	lds	r18, 0x016E
    23c8:	fc 01       	movw	r30, r24
    23ca:	ee 58       	subi	r30, 0x8E	; 142
    23cc:	fe 4f       	sbci	r31, 0xFE	; 254
    23ce:	20 83       	st	Z, r18
	i++;
    23d0:	80 91 6f 01 	lds	r24, 0x016F
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	80 93 6f 01 	sts	0x016F, r24

	//Make sure when the user enters numbers that they're hidden for privacy
	if((pressedKey <= 9) && (pressedKey >= 0))
    23da:	80 91 6e 01 	lds	r24, 0x016E
    23de:	8a 30       	cpi	r24, 0x0A	; 10
    23e0:	28 f4       	brcc	.+10     	; 0x23ec <enter_password+0x4c>
	{
		LCD_displayString("*");   /* display the pressed keypad switch */
    23e2:	8a eb       	ldi	r24, 0xBA	; 186
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
    23ea:	72 c0       	rjmp	.+228    	; 0x24d0 <enter_password+0x130>


	// "13" is the On key on the keypad and here it represents the (enter) key
	}else if(pressedKey == 13){
    23ec:	80 91 6e 01 	lds	r24, 0x016E
    23f0:	8d 30       	cpi	r24, 0x0D	; 13
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <enter_password+0x56>
    23f4:	6d c0       	rjmp	.+218    	; 0x24d0 <enter_password+0x130>

		//make sure that the user enters 5 numbers only which is the required password length
		if( i - 1 == 5){
    23f6:	80 91 6f 01 	lds	r24, 0x016F
    23fa:	86 30       	cpi	r24, 0x06	; 6
    23fc:	09 f0       	breq	.+2      	; 0x2400 <enter_password+0x60>
    23fe:	5b c0       	rjmp	.+182    	; 0x24b6 <enter_password+0x116>
			if(stage==0){
    2400:	80 91 70 01 	lds	r24, 0x0170
    2404:	88 23       	and	r24, r24
    2406:	c1 f4       	brne	.+48     	; 0x2438 <enter_password+0x98>
				/*if we're in stage 0 then send the entered password to the control ECU and
				ask the user to enter the password again*/
				LCD_clearScreen();
    2408:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
    240c:	82 e7       	ldi	r24, 0x72	; 114
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	65 e0       	ldi	r22, 0x05	; 5
    2412:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <send_password>
				LCD_displayString("plz re-enter the");
    2416:	8c eb       	ldi	r24, 0xBC	; 188
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "same pass: ");
    241e:	2d ec       	ldi	r18, 0xCD	; 205
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	a9 01       	movw	r20, r18
    2428:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_displayStringRowColumn>

				//move to the next stage (enter the password for a second time)
				stage = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	80 93 70 01 	sts	0x0170, r24

				//reset the array counter
				i=0;
    2432:	10 92 6f 01 	sts	0x016F, r1
    2436:	4c c0       	rjmp	.+152    	; 0x24d0 <enter_password+0x130>
			}else if(stage==1){
    2438:	80 91 70 01 	lds	r24, 0x0170
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	69 f4       	brne	.+26     	; 0x245a <enter_password+0xba>
				/* if we're in stage 1 then  send the second entered password to the control ECU
				and move to the next stage */
				LCD_clearScreen();
    2440:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
    2444:	82 e7       	ldi	r24, 0x72	; 114
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <send_password>

				//move to the next stage (wait for an order from the control ECU)
				stage = 2;
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	80 93 70 01 	sts	0x0170, r24

				//reset the array counter
				i=0;
    2454:	10 92 6f 01 	sts	0x016F, r1
    2458:	3b c0       	rjmp	.+118    	; 0x24d0 <enter_password+0x130>
			}
			else if(stage==3){
    245a:	80 91 70 01 	lds	r24, 0x0170
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	41 f4       	brne	.+16     	; 0x2472 <enter_password+0xd2>
				LCD_clearScreen();
    2462:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
    2466:	82 e7       	ldi	r24, 0x72	; 114
    2468:	91 e0       	ldi	r25, 0x01	; 1
    246a:	65 e0       	ldi	r22, 0x05	; 5
    246c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <send_password>
    2470:	2f c0       	rjmp	.+94     	; 0x24d0 <enter_password+0x130>
			}
			else if(stage==4){
    2472:	80 91 70 01 	lds	r24, 0x0170
    2476:	84 30       	cpi	r24, 0x04	; 4
    2478:	69 f4       	brne	.+26     	; 0x2494 <enter_password+0xf4>
				/* if we're in stage 4 then  send the entered password to the control ECU
				and move to the next stage */
				LCD_clearScreen();
    247a:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
    247e:	82 e7       	ldi	r24, 0x72	; 114
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	65 e0       	ldi	r22, 0x05	; 5
    2484:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <send_password>

				//move to the next stage (wait for an order from the control ECU)
				stage = 5;
    2488:	85 e0       	ldi	r24, 0x05	; 5
    248a:	80 93 70 01 	sts	0x0170, r24

				//reset the array counter
				i = 0;
    248e:	10 92 6f 01 	sts	0x016F, r1
    2492:	1e c0       	rjmp	.+60     	; 0x24d0 <enter_password+0x130>
			}else if(stage==6){
    2494:	80 91 70 01 	lds	r24, 0x0170
    2498:	86 30       	cpi	r24, 0x06	; 6
    249a:	d1 f4       	brne	.+52     	; 0x24d0 <enter_password+0x130>
				/* if we're in stage 6 then  send the entered password to the control ECU
				and move to the next stage */
				LCD_clearScreen();
    249c:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
    24a0:	82 e7       	ldi	r24, 0x72	; 114
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	65 e0       	ldi	r22, 0x05	; 5
    24a6:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <send_password>

				//move to the next stage (confirm if password is wrong or right)
				stage = 7;
    24aa:	87 e0       	ldi	r24, 0x07	; 7
    24ac:	80 93 70 01 	sts	0x0170, r24

				//reset the array counter
				i=0;
    24b0:	10 92 6f 01 	sts	0x016F, r1
    24b4:	0d c0       	rjmp	.+26     	; 0x24d0 <enter_password+0x130>
			}

		}else{	//number of entered characters is not 5 digits long
			LCD_clearScreen();
    24b6:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
			LCD_displayString("Err:Password has to");
    24ba:	89 ed       	ldi	r24, 0xD9	; 217
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "be 5 digits long");
    24c2:	2d ee       	ldi	r18, 0xED	; 237
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	a9 01       	movw	r20, r18
    24cc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_displayStringRowColumn>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	aa ef       	ldi	r26, 0xFA	; 250
    24d6:	b3 e4       	ldi	r27, 0x43	; 67
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	9c 87       	std	Y+12, r25	; 0x0c
    24dc:	ad 87       	std	Y+13, r26	; 0x0d
    24de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a ef       	ldi	r20, 0xFA	; 250
    24ee:	54 e4       	ldi	r21, 0x44	; 68
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8f 83       	std	Y+7, r24	; 0x07
    24fa:	98 87       	std	Y+8, r25	; 0x08
    24fc:	a9 87       	std	Y+9, r26	; 0x09
    24fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <enter_password+0x182>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <enter_password+0x200>
	else if (__tmp > 65535)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <enter_password+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	6b 85       	ldd	r22, Y+11	; 0x0b
    253c:	7c 85       	ldd	r23, Y+12	; 0x0c
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <enter_password+0x1e2>
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <enter_password+0x1d0>
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <enter_password+0x1c4>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <enter_password+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <enter_password+0x20c>
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	//
	//	}
	_delay_ms(500); /* Press time */


}
    25b4:	2e 96       	adiw	r28, 0x0e	; 14
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <send_password>:

/*
 * Description : Send the password by UART to the control ECU
 *
 */
void send_password(uint8 *password_arr,uint8 size){
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <send_password+0x6>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <send_password+0x8>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	9b 83       	std	Y+3, r25	; 0x03
    25d4:	8a 83       	std	Y+2, r24	; 0x02
    25d6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++){
    25d8:	19 82       	std	Y+1, r1	; 0x01
    25da:	0e c0       	rjmp	.+28     	; 0x25f8 <send_password+0x32>
		UART_sendByte(password_arr[i]);
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	fc 01       	movw	r30, r24
    25e8:	e2 0f       	add	r30, r18
    25ea:	f3 1f       	adc	r31, r19
    25ec:	80 81       	ld	r24, Z
    25ee:	0e 94 ee 14 	call	0x29dc	; 0x29dc <UART_sendByte>
 * Description : Send the password by UART to the control ECU
 *
 */
void send_password(uint8 *password_arr,uint8 size){
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++){
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	85 30       	cpi	r24, 0x05	; 5
    25fc:	78 f3       	brcs	.-34     	; 0x25dc <send_password+0x16>
		UART_sendByte(password_arr[i]);
	}
}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <enter_doorOrChange_choice>:

/*
 * Description : Take the input choice from user
 *
 */
void enter_doorOrChange_choice(void){
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	2e 97       	sbiw	r28, 0x0e	; 14
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
	pressedKey = KEYPAD_getPressedKey();
    2620:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <KEYPAD_getPressedKey>
    2624:	80 93 6e 01 	sts	0x016E, r24
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	aa ef       	ldi	r26, 0xFA	; 250
    262e:	b3 e4       	ldi	r27, 0x43	; 67
    2630:	8b 87       	std	Y+11, r24	; 0x0b
    2632:	9c 87       	std	Y+12, r25	; 0x0c
    2634:	ad 87       	std	Y+13, r26	; 0x0d
    2636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2638:	6b 85       	ldd	r22, Y+11	; 0x0b
    263a:	7c 85       	ldd	r23, Y+12	; 0x0c
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4a ef       	ldi	r20, 0xFA	; 250
    2646:	54 e4       	ldi	r21, 0x44	; 68
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8f 83       	std	Y+7, r24	; 0x07
    2652:	98 87       	std	Y+8, r25	; 0x08
    2654:	a9 87       	std	Y+9, r26	; 0x09
    2656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	2c f4       	brge	.+10     	; 0x267a <enter_doorOrChange_choice+0x6e>
		__ticks = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	3f c0       	rjmp	.+126    	; 0x26f8 <enter_doorOrChange_choice+0xec>
	else if (__tmp > 65535)
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	4c f5       	brge	.+82     	; 0x26e4 <enter_doorOrChange_choice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	6b 85       	ldd	r22, Y+11	; 0x0b
    2694:	7c 85       	ldd	r23, Y+12	; 0x0c
    2696:	8d 85       	ldd	r24, Y+13	; 0x0d
    2698:	9e 85       	ldd	r25, Y+14	; 0x0e
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <enter_doorOrChange_choice+0xce>
    26bc:	88 ec       	ldi	r24, 0xC8	; 200
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <enter_doorOrChange_choice+0xbc>
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <enter_doorOrChange_choice+0xb0>
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <enter_doorOrChange_choice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <enter_doorOrChange_choice+0xf8>
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500); /* Press time */

	if(pressedKey == '+'){
    270c:	80 91 6e 01 	lds	r24, 0x016E
    2710:	8b 32       	cpi	r24, 0x2B	; 43
    2712:	71 f4       	brne	.+28     	; 0x2730 <enter_doorOrChange_choice+0x124>
		LCD_clearScreen();
    2714:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
		LCD_displayString("Pls enter pass:");
    2718:	80 e6       	ldi	r24, 0x60	; 96
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>
		enter_doorOrChange_choice_return = 2;
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	80 93 77 01 	sts	0x0177, r24
    272e:	21 c0       	rjmp	.+66     	; 0x2772 <enter_doorOrChange_choice+0x166>
	}else if(pressedKey == '-'){
    2730:	80 91 6e 01 	lds	r24, 0x016E
    2734:	8d 32       	cpi	r24, 0x2D	; 45
    2736:	71 f4       	brne	.+28     	; 0x2754 <enter_doorOrChange_choice+0x148>
		LCD_clearScreen();
    2738:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
		LCD_displayString("Pls enter pass:");
    273c:	80 e6       	ldi	r24, 0x60	; 96
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>
		enter_doorOrChange_choice_return = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 93 77 01 	sts	0x0177, r24
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <enter_doorOrChange_choice+0x166>
	}else{
		LCD_clearScreen();
    2754:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
		LCD_displayString("Err:Enter + or -");
    2758:	8e ef       	ldi	r24, 0xFE	; 254
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "only");
    2760:	2f e0       	ldi	r18, 0x0F	; 15
    2762:	31 e0       	ldi	r19, 0x01	; 1
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	a9 01       	movw	r20, r18
    276a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_displayStringRowColumn>
		enter_doorOrChange_choice_return = 0;
    276e:	10 92 77 01 	sts	0x0177, r1
	}
}
    2772:	2e 96       	adiw	r28, 0x0e	; 14
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <operate_choice>:

/*
 * Description : Operate the choice that came from the control ECU
 *
 */
void operate_choice(void){
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
	if(dummy_1==2){		//+ : Open Door
    278c:	80 91 78 01 	lds	r24, 0x0178
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	61 f5       	brne	.+88     	; 0x27ec <operate_choice+0x68>
		LCD_clearScreen();
    2794:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
		LCD_displayString("Door is Unlocking");
    2798:	84 e1       	ldi	r24, 0x14	; 20
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		Timer_1_delay(15);
    27a0:	6f e0       	ldi	r22, 0x0F	; 15
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>
		LCD_clearScreen();
    27ac:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>

		LCD_displayString("holding motor");
    27b0:	86 e2       	ldi	r24, 0x26	; 38
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		Timer_1_delay(3);
    27b8:	63 e0       	ldi	r22, 0x03	; 3
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>
		LCD_clearScreen();
    27c4:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>

		LCD_displayString("Door is locking");
    27c8:	84 e3       	ldi	r24, 0x34	; 52
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		Timer_1_delay(15);
    27d0:	6f e0       	ldi	r22, 0x0F	; 15
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>
		LCD_clearScreen();
    27dc:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>

		//reset the array counter
		i=0;
    27e0:	10 92 6f 01 	sts	0x016F, r1

		//move back to the main choice menu
		stage = 3;
    27e4:	83 e0       	ldi	r24, 0x03	; 3
    27e6:	80 93 70 01 	sts	0x0170, r24
    27ea:	1e c0       	rjmp	.+60     	; 0x2828 <operate_choice+0xa4>
	}
	else if(dummy_1==1){	//- : Change Pass
    27ec:	80 91 78 01 	lds	r24, 0x0178
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	d1 f4       	brne	.+52     	; 0x2828 <operate_choice+0xa4>

		LCD_clearScreen();
    27f4:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
		LCD_displayString("Changing password");
    27f8:	84 e4       	ldi	r24, 0x44	; 68
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		Timer_1_delay(1);
    2800:	61 e0       	ldi	r22, 0x01	; 1
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 17 14 	call	0x282e	; 0x282e <Timer_1_delay>

		LCD_clearScreen();
    280c:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_clearScreen>
		LCD_displayString("Pls enter pass:");
    2810:	80 e6       	ldi	r24, 0x60	; 96
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_moveCursor>

		//reset the array counter
		i=0;
    2820:	10 92 6f 01 	sts	0x016F, r1

		//move back to the main password creation stage
		stage=0;
    2824:	10 92 70 01 	sts	0x0170, r1
	}
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <Timer_1_delay>:


/*
 * Description: Delay the code execution for a specific time interval
 */
void Timer_1_delay(uint32 delay){
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <Timer_1_delay+0x6>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <Timer_1_delay+0x8>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	69 83       	std	Y+1, r22	; 0x01
    283c:	7a 83       	std	Y+2, r23	; 0x02
    283e:	8b 83       	std	Y+3, r24	; 0x03
    2840:	9c 83       	std	Y+4, r25	; 0x04

	//Initialize timer1 with the configuration structure
	Timer_1_init(&Timer1_ConfigStruct);
    2842:	86 e6       	ldi	r24, 0x66	; 102
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Timer_1_init>

	//Set the callback function for timer1
	Timer_1_setCallBack(&Timer_1_CallBack);
    284a:	83 e4       	ldi	r24, 0x43	; 67
    284c:	94 e1       	ldi	r25, 0x14	; 20
    284e:	0e 94 92 06 	call	0xd24	; 0xd24 <Timer_1_setCallBack>

	//Stay in the loop as long as the required number of delay seconds hasn't elapsed
	while(seconds != delay);
    2852:	80 91 71 01 	lds	r24, 0x0171
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	ab 81       	ldd	r26, Y+3	; 0x03
    2864:	bc 81       	ldd	r27, Y+4	; 0x04
    2866:	28 17       	cp	r18, r24
    2868:	39 07       	cpc	r19, r25
    286a:	4a 07       	cpc	r20, r26
    286c:	5b 07       	cpc	r21, r27
    286e:	89 f7       	brne	.-30     	; 0x2852 <Timer_1_delay+0x24>

	//Deinitialize timer1
	Timer_1_deInit();
    2870:	0e 94 72 06 	call	0xce4	; 0xce4 <Timer_1_deInit>

	//Reset the seconds variable
	seconds = 0;
    2874:	10 92 71 01 	sts	0x0171, r1
}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <Timer_1_CallBack>:


/*
 * Description: increment the seconds variable each time the function is called
 */
void Timer_1_CallBack(void){
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    288e:	80 91 71 01 	lds	r24, 0x0171
    2892:	8f 5f       	subi	r24, 0xFF	; 255
    2894:	80 93 71 01 	sts	0x0171, r24
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <UART_init>:
/*
 * Description :
 * Functional responsible for Initialize the UART device
 */
void UART_init(UART_ConfigType *UART_CONFIG_PTR)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <UART_init+0x6>
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <UART_init+0x8>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9c 83       	std	Y+4, r25	; 0x04
    28ac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28ae:	1a 82       	std	Y+2, r1	; 0x02
    28b0:	19 82       	std	Y+1, r1	; 0x01

//	for double transmission speed
	UCSRA = (1<<U2X);
    28b2:	eb e2       	ldi	r30, 0x2B	; 43
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	80 83       	st	Z, r24


//	 Receiver Enable + Transmitter Enable
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28ba:	ea e2       	ldi	r30, 0x2A	; 42
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	88 e1       	ldi	r24, 0x18	; 24
    28c0:	80 83       	st	Z, r24
	

//	 * URSEL   The URSEL must be one while writing the UCSRC
	SET_BIT(UCSRC,URSEL);
    28c2:	a0 e4       	ldi	r26, 0x40	; 64
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e0 e4       	ldi	r30, 0x40	; 64
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	80 68       	ori	r24, 0x80	; 128
    28ce:	8c 93       	st	X, r24
//	 * UMSEL   Operation mode
//	 * UPM1:0  parity bit
//	 * USBS    No of stop bits
//	 * UCSZ1:0 For data mode
//	 * UCPOL   Used with the Synchronous operation only
	UCSRC =( (UCSRC & ~0x40) | ( ( (UART_CONFIG_PTR->synchronization)<<UMSEL) & 0x40 ) );
    28d0:	a0 e4       	ldi	r26, 0x40	; 64
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e0 e4       	ldi	r30, 0x40	; 64
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	28 2f       	mov	r18, r24
    28dc:	2f 7b       	andi	r18, 0xBF	; 191
    28de:	eb 81       	ldd	r30, Y+3	; 0x03
    28e0:	fc 81       	ldd	r31, Y+4	; 0x04
    28e2:	87 81       	ldd	r24, Z+7	; 0x07
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	00 24       	eor	r0, r0
    28ea:	96 95       	lsr	r25
    28ec:	87 95       	ror	r24
    28ee:	07 94       	ror	r0
    28f0:	96 95       	lsr	r25
    28f2:	87 95       	ror	r24
    28f4:	07 94       	ror	r0
    28f6:	98 2f       	mov	r25, r24
    28f8:	80 2d       	mov	r24, r0
    28fa:	80 74       	andi	r24, 0x40	; 64
    28fc:	82 2b       	or	r24, r18
    28fe:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x30) | ( ( (UART_CONFIG_PTR->parity)<<UPM0) & 0x30) );
    2900:	a0 e4       	ldi	r26, 0x40	; 64
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e0 e4       	ldi	r30, 0x40	; 64
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	28 2f       	mov	r18, r24
    290c:	2f 7c       	andi	r18, 0xCF	; 207
    290e:	eb 81       	ldd	r30, Y+3	; 0x03
    2910:	fc 81       	ldd	r31, Y+4	; 0x04
    2912:	81 81       	ldd	r24, Z+1	; 0x01
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	82 95       	swap	r24
    291a:	92 95       	swap	r25
    291c:	90 7f       	andi	r25, 0xF0	; 240
    291e:	98 27       	eor	r25, r24
    2920:	80 7f       	andi	r24, 0xF0	; 240
    2922:	98 27       	eor	r25, r24
    2924:	80 73       	andi	r24, 0x30	; 48
    2926:	82 2b       	or	r24, r18
    2928:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x08) | ( ( (UART_CONFIG_PTR->stop_bit)<<USBS) & 0x08) );
    292a:	a0 e4       	ldi	r26, 0x40	; 64
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e0 e4       	ldi	r30, 0x40	; 64
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	28 2f       	mov	r18, r24
    2936:	27 7f       	andi	r18, 0xF7	; 247
    2938:	eb 81       	ldd	r30, Y+3	; 0x03
    293a:	fc 81       	ldd	r31, Y+4	; 0x04
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	88 2f       	mov	r24, r24
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	88 70       	andi	r24, 0x08	; 8
    2950:	82 2b       	or	r24, r18
    2952:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x06) | ( ( (UART_CONFIG_PTR->bit_data)<<UCSZ0) & 0x06) );
    2954:	a0 e4       	ldi	r26, 0x40	; 64
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e0 e4       	ldi	r30, 0x40	; 64
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	28 2f       	mov	r18, r24
    2960:	29 7f       	andi	r18, 0xF9	; 249
    2962:	eb 81       	ldd	r30, Y+3	; 0x03
    2964:	fc 81       	ldd	r31, Y+4	; 0x04
    2966:	80 81       	ld	r24, Z
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	86 70       	andi	r24, 0x06	; 6
    2972:	82 2b       	or	r24, r18
    2974:	8c 93       	st	X, r24


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_CONFIG_PTR->baud_rate * 8UL))) - 1);
    2976:	eb 81       	ldd	r30, Y+3	; 0x03
    2978:	fc 81       	ldd	r31, Y+4	; 0x04
    297a:	83 81       	ldd	r24, Z+3	; 0x03
    297c:	94 81       	ldd	r25, Z+4	; 0x04
    297e:	a5 81       	ldd	r26, Z+5	; 0x05
    2980:	b6 81       	ldd	r27, Z+6	; 0x06
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	aa 1f       	adc	r26, r26
    2988:	bb 1f       	adc	r27, r27
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	aa 1f       	adc	r26, r26
    2990:	bb 1f       	adc	r27, r27
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	aa 1f       	adc	r26, r26
    2998:	bb 1f       	adc	r27, r27
    299a:	9c 01       	movw	r18, r24
    299c:	ad 01       	movw	r20, r26
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	92 e1       	ldi	r25, 0x12	; 18
    29a2:	aa e7       	ldi	r26, 0x7A	; 122
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__udivmodsi4>
    29ae:	da 01       	movw	r26, r20
    29b0:	c9 01       	movw	r24, r18
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    29b8:	e0 e4       	ldi	r30, 0x40	; 64
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	9a 81       	ldd	r25, Y+2	; 0x02
    29c0:	89 2f       	mov	r24, r25
    29c2:	99 27       	eor	r25, r25
    29c4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29c6:	e9 e2       	ldi	r30, 0x29	; 41
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	80 83       	st	Z, r24
}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <UART_sendByte>:
/*
 * Description :
 * Function responsible for sending a byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	0f 92       	push	r0
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29e8:	eb e2       	ldi	r30, 0x2B	; 43
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	80 72       	andi	r24, 0x20	; 32
    29f4:	90 70       	andi	r25, 0x00	; 0
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	b9 f3       	breq	.-18     	; 0x29e8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register
	 */
	UDR = data;
    29fa:	ec e2       	ldi	r30, 0x2C	; 44
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	80 83       	st	Z, r24

}
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receiving a byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a12:	eb e2       	ldi	r30, 0x2B	; 43
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	88 23       	and	r24, r24
    2a1a:	dc f7       	brge	.-10     	; 0x2a12 <UART_recieveByte+0x8>

    return UDR;		
    2a1c:	ec e2       	ldi	r30, 0x2C	; 44
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
}
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <UART_sendString+0x6>
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	9b 83       	std	Y+3, r25	; 0x03
    2a36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a38:	19 82       	std	Y+1, r1	; 0x01
    2a3a:	0e c0       	rjmp	.+28     	; 0x2a58 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	fc 01       	movw	r30, r24
    2a48:	e2 0f       	add	r30, r18
    2a4a:	f3 1f       	adc	r31, r19
    2a4c:	80 81       	ld	r24, Z
    2a4e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <UART_sendByte>
		i++;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	39 f7       	brne	.-50     	; 0x2a3c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <UART_receiveString+0xa>
    2a84:	0f 92       	push	r0
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9b 83       	std	Y+3, r25	; 0x03
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a8e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9a:	8c 01       	movw	r16, r24
    2a9c:	02 0f       	add	r16, r18
    2a9e:	13 1f       	adc	r17, r19
    2aa0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <UART_recieveByte>
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	80 83       	st	Z, r24
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	8f 5f       	subi	r24, 0xFF	; 255
    2aae:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aba:	8c 01       	movw	r16, r24
    2abc:	02 0f       	add	r16, r18
    2abe:	13 1f       	adc	r17, r19
    2ac0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <UART_recieveByte>
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e2 0f       	add	r30, r18
    2ad6:	f3 1f       	adc	r31, r19
    2ad8:	80 81       	ld	r24, Z
    2ada:	83 32       	cpi	r24, 0x23	; 35
    2adc:	31 f7       	brne	.-52     	; 0x2aaa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e2 0f       	add	r30, r18
    2aec:	f3 1f       	adc	r31, r19
    2aee:	10 82       	st	Z, r1
}
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	08 95       	ret

00002b00 <__udivmodsi4>:
    2b00:	a1 e2       	ldi	r26, 0x21	; 33
    2b02:	1a 2e       	mov	r1, r26
    2b04:	aa 1b       	sub	r26, r26
    2b06:	bb 1b       	sub	r27, r27
    2b08:	fd 01       	movw	r30, r26
    2b0a:	0d c0       	rjmp	.+26     	; 0x2b26 <__udivmodsi4_ep>

00002b0c <__udivmodsi4_loop>:
    2b0c:	aa 1f       	adc	r26, r26
    2b0e:	bb 1f       	adc	r27, r27
    2b10:	ee 1f       	adc	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	a2 17       	cp	r26, r18
    2b16:	b3 07       	cpc	r27, r19
    2b18:	e4 07       	cpc	r30, r20
    2b1a:	f5 07       	cpc	r31, r21
    2b1c:	20 f0       	brcs	.+8      	; 0x2b26 <__udivmodsi4_ep>
    2b1e:	a2 1b       	sub	r26, r18
    2b20:	b3 0b       	sbc	r27, r19
    2b22:	e4 0b       	sbc	r30, r20
    2b24:	f5 0b       	sbc	r31, r21

00002b26 <__udivmodsi4_ep>:
    2b26:	66 1f       	adc	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	1a 94       	dec	r1
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <__udivmodsi4_loop>
    2b32:	60 95       	com	r22
    2b34:	70 95       	com	r23
    2b36:	80 95       	com	r24
    2b38:	90 95       	com	r25
    2b3a:	9b 01       	movw	r18, r22
    2b3c:	ac 01       	movw	r20, r24
    2b3e:	bd 01       	movw	r22, r26
    2b40:	cf 01       	movw	r24, r30
    2b42:	08 95       	ret

00002b44 <__prologue_saves__>:
    2b44:	2f 92       	push	r2
    2b46:	3f 92       	push	r3
    2b48:	4f 92       	push	r4
    2b4a:	5f 92       	push	r5
    2b4c:	6f 92       	push	r6
    2b4e:	7f 92       	push	r7
    2b50:	8f 92       	push	r8
    2b52:	9f 92       	push	r9
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	ca 1b       	sub	r28, r26
    2b6e:	db 0b       	sbc	r29, r27
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	09 94       	ijmp

00002b7c <__epilogue_restores__>:
    2b7c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b7e:	39 88       	ldd	r3, Y+17	; 0x11
    2b80:	48 88       	ldd	r4, Y+16	; 0x10
    2b82:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b84:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b86:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b88:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b8e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b90:	c8 84       	ldd	r12, Y+8	; 0x08
    2b92:	df 80       	ldd	r13, Y+7	; 0x07
    2b94:	ee 80       	ldd	r14, Y+6	; 0x06
    2b96:	fd 80       	ldd	r15, Y+5	; 0x05
    2b98:	0c 81       	ldd	r16, Y+4	; 0x04
    2b9a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b9c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2ba0:	ce 0f       	add	r28, r30
    2ba2:	d1 1d       	adc	r29, r1
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	ed 01       	movw	r28, r26
    2bb0:	08 95       	ret

00002bb2 <itoa>:
    2bb2:	fb 01       	movw	r30, r22
    2bb4:	9f 01       	movw	r18, r30
    2bb6:	e8 94       	clt
    2bb8:	42 30       	cpi	r20, 0x02	; 2
    2bba:	c4 f0       	brlt	.+48     	; 0x2bec <itoa+0x3a>
    2bbc:	45 32       	cpi	r20, 0x25	; 37
    2bbe:	b4 f4       	brge	.+44     	; 0x2bec <itoa+0x3a>
    2bc0:	4a 30       	cpi	r20, 0x0A	; 10
    2bc2:	29 f4       	brne	.+10     	; 0x2bce <itoa+0x1c>
    2bc4:	97 fb       	bst	r25, 7
    2bc6:	1e f4       	brtc	.+6      	; 0x2bce <itoa+0x1c>
    2bc8:	90 95       	com	r25
    2bca:	81 95       	neg	r24
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	64 2f       	mov	r22, r20
    2bd0:	77 27       	eor	r23, r23
    2bd2:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__udivmodhi4>
    2bd6:	80 5d       	subi	r24, 0xD0	; 208
    2bd8:	8a 33       	cpi	r24, 0x3A	; 58
    2bda:	0c f0       	brlt	.+2      	; 0x2bde <itoa+0x2c>
    2bdc:	89 5d       	subi	r24, 0xD9	; 217
    2bde:	81 93       	st	Z+, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	a1 f7       	brne	.-24     	; 0x2bce <itoa+0x1c>
    2be6:	16 f4       	brtc	.+4      	; 0x2bec <itoa+0x3a>
    2be8:	5d e2       	ldi	r21, 0x2D	; 45
    2bea:	51 93       	st	Z+, r21
    2bec:	10 82       	st	Z, r1
    2bee:	c9 01       	movw	r24, r18
    2bf0:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <strrev>

00002bf4 <strrev>:
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	67 2f       	mov	r22, r23
    2bfa:	71 91       	ld	r23, Z+
    2bfc:	77 23       	and	r23, r23
    2bfe:	e1 f7       	brne	.-8      	; 0x2bf8 <strrev+0x4>
    2c00:	32 97       	sbiw	r30, 0x02	; 2
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <strrev+0x18>
    2c04:	7c 91       	ld	r23, X
    2c06:	6d 93       	st	X+, r22
    2c08:	70 83       	st	Z, r23
    2c0a:	62 91       	ld	r22, -Z
    2c0c:	ae 17       	cp	r26, r30
    2c0e:	bf 07       	cpc	r27, r31
    2c10:	c8 f3       	brcs	.-14     	; 0x2c04 <strrev+0x10>
    2c12:	08 95       	ret

00002c14 <__udivmodhi4>:
    2c14:	aa 1b       	sub	r26, r26
    2c16:	bb 1b       	sub	r27, r27
    2c18:	51 e1       	ldi	r21, 0x11	; 17
    2c1a:	07 c0       	rjmp	.+14     	; 0x2c2a <__udivmodhi4_ep>

00002c1c <__udivmodhi4_loop>:
    2c1c:	aa 1f       	adc	r26, r26
    2c1e:	bb 1f       	adc	r27, r27
    2c20:	a6 17       	cp	r26, r22
    2c22:	b7 07       	cpc	r27, r23
    2c24:	10 f0       	brcs	.+4      	; 0x2c2a <__udivmodhi4_ep>
    2c26:	a6 1b       	sub	r26, r22
    2c28:	b7 0b       	sbc	r27, r23

00002c2a <__udivmodhi4_ep>:
    2c2a:	88 1f       	adc	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	5a 95       	dec	r21
    2c30:	a9 f7       	brne	.-22     	; 0x2c1c <__udivmodhi4_loop>
    2c32:	80 95       	com	r24
    2c34:	90 95       	com	r25
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	08 95       	ret

00002c3c <_exit>:
    2c3c:	f8 94       	cli

00002c3e <__stop_program>:
    2c3e:	ff cf       	rjmp	.-2      	; 0x2c3e <__stop_program>
